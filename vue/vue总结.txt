一、vue init webpack +项目名称（新建一个vue的项目）

二、vue传值问题
父向子传值
1.使用props
父组件
<template>
    <child :msg="message"></child>
</template>
<script>
import child from './child.vue';
export default {
    components: {
        child
    },
    data () {
        return {
            message: 'father message';
        }
    }
}
</script>
子组件
<template>
    <div>{{msg}}</div>
</template>
<script>
export default {
    data(){
        return{
            list:[1,2,3,4,5,6]
        }
    },
    props: {
        msg: {
            type: String,
            required: true
        }
    },
    methods:{
        handleClick:function(){
            console.log('hahaha)
        }
    }
}
</script>
2.使用$children可以在父组件中访问子组件。
console.log(this.$children[0].list);
console.log(this.$children[0].handleClick);
子组件向父组件传值
1.使用vue事件($emit)
父组件
<template>
    <child @msgFunc="func"></child>
</template>
<script>
import child from './child.vue';
export default {
    data(){
        return{
            message:'hahhahahah'
        }
    },
    components: {
        child
    },
    methods: {
        func (msg) {
            console.log(msg);
        }
    }
}
</script>
子组件
<template>
    <button @click="handleClick">点我</button>
</template>

<script>
export default {
    props: {
        msg: {
            type: String,
            required: true
        }
    },
    methods () {
        handleClick () {
            //........
            this.$emit('msgFunc');
        }
    }
}
</script>
2.通过修改父组件传递过的props来修改父组件的数据
只使用于引用变量
3.使用$parent来访问父组件的数据
console.log(this.$parent.message);
非父子之间通信用bus
/*新建一个Vue实例作为中央事件总嫌*/
let event = new Vue();

/*监听事件*/
event.$on('eventName', (val) => {
    //......do something
});

/*触发事件*/
event.$emit('eventName', 'this is a message.');

复杂的通信使用vuex